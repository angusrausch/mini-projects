name: Rust CI/CD

on:
  push:
    branches: ["**"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-latest
            container: rust:1.90-bullseye
            target: x86_64-unknown-linux-musl
            exe_ext: ""
            cross_deps: "sudo apt-get update && sudo apt-get install -y musl-tools"

          - name: linux-arm64
            runner: ubuntu-22.04-arm
            container: rustlang/rust:nightly-bullseye
            target: aarch64-unknown-linux-gnu
            exe_ext: ""
            cross_deps: ""

          - name: windows-x86_64
            runner: ubuntu-latest
            container: rust:1.90-bullseye
            target: x86_64-pc-windows-gnu
            exe_ext: .exe
            cross_deps: "sudo apt-get update && sudo apt-get install -y mingw-w64"

          - name: macos-arm64
            runner: [self-hosted, macos]
            container: ""
            target: aarch64-apple-darwin
            exe_ext: ""
            cross_deps: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install cross-compile dependencies
        if: matrix.cross_deps != ''
        run: ${{ matrix.cross_deps }}

      - name: Add target
        if: matrix.target != ''
        run: rustup target add ${{ matrix.target }}

      - name: Build Debug
        working-directory: ./site_tester
        run: cargo build --target ${{ matrix.target }}

      - name: Upload Debug Artifact
        uses: actions/upload-artifact@v4
        with:
          name: site_tester-${{ matrix.name }}-debug
          path: ./site_tester/target/${{ matrix.target }}/debug/site_tester${{ matrix.exe_ext }}

  release:
    # Only run when pushing to main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-latest
            container: rust:1.90-bullseye
            target: x86_64-unknown-linux-musl
            exe_ext: ""
            cross_deps: "sudo apt-get update && sudo apt-get install -y musl-tools"

          - name: linux-arm64
            runner: ubuntu-22.04-arm
            container: rustlang/rust:nightly-bullseye
            target: aarch64-unknown-linux-gnu
            exe_ext: ""
            cross_deps: ""

          - name: windows-x86_64
            runner: ubuntu-latest
            container: rust:1.90-bullseye
            target: x86_64-pc-windows-gnu
            exe_ext: .exe
            cross_deps: "sudo apt-get update && sudo apt-get install -y mingw-w64"

          - name: macos-arm64
            runner: [self-hosted, macos]
            container: ""
            target: aarch64-apple-darwin
            exe_ext: ""
            cross_deps: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install cross-compile dependencies
        if: matrix.cross_deps != ''
        run: ${{ matrix.cross_deps }}

      - name: Add target
        if: matrix.target != ''
        run: rustup target add ${{ matrix.target }}

      - name: Build Release
        working-directory: ./site_tester
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        working-directory: ./site_tester
        run: |
          exe_name="site_tester-${{ matrix.name }}-release${{ matrix.exe_ext }}"
          path="./target/${{ matrix.target }}/release/site_tester${{ matrix.exe_ext }}"

          if [[ -f "$path" ]]; then
            echo "Uploading $exe_name..."
            cp "$path" "$exe_name"
            gh release upload ${{ github.ref_name }} "$exe_name" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
